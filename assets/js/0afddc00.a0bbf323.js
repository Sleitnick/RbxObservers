"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[244],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>v});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,v=p["".concat(u,".").concat(d)]||p[d]||b[d]||i;return r?n.createElement(v,s(s({ref:t},c),{},{components:r})):n.createElement(v,s({ref:t},c))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},72116:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>b,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const i={},s="Attributes",o={unversionedId:"Observers/attributes",id:"Observers/attributes",title:"Attributes",description:"The Attribute observer is triggered when an attribute is set to a non-nil value.",source:"@site/docs/Observers/attributes.md",sourceDirName:"Observers",slug:"/Observers/attributes",permalink:"/RbxObservers/docs/Observers/attributes",draft:!1,editUrl:"https://github.com/Sleitnick/RbxObservers/edit/main/docs/Observers/attributes.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Observer Pattern",permalink:"/RbxObservers/docs/observer-pattern"},next:{title:"Tags",permalink:"/RbxObservers/docs/Observers/tags"}},u={},l=[{value:"Typing",id:"typing",level:2},{value:"Guards",id:"guards",level:2}],c={toc:l},p="wrapper";function b(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"attributes"},"Attributes"),(0,a.kt)("p",null,"The Attribute observer is triggered when an attribute is set to a non-",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Observers.observeAttribute(myInstance, "MyAttribute", function(value)\n    print("Attribute is", value)\n\n    return function()\n        print("Attribute is no longer", value)\n    end\nend)\n')),(0,a.kt)("h2",{id:"typing"},"Typing"),(0,a.kt)("p",null,"Technically, the value of an attribute is not known (it's not necessarily ",(0,a.kt)("inlineCode",{parentName:"p"},"unknown"),", as we know it's some sort of attribute value, of which there is a limited amount of types). However, to make the API easier to use, ",(0,a.kt)("inlineCode",{parentName:"p"},"observeAttribute")," uses a generic value to allow developers to denote what type they expect. For instance, a string:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Observers.observeAttribute(myInstance, "MyAttribute", function(value: string) ... end)\n')),(0,a.kt)("p",null,"However, be aware that this does not enforce the attribute to be a specific type. Especially in client-facing code, it is good to ensure that the type of the attribute matches what is expected. For instance, if a string is expected:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Observers.observeAttribute(myInstance, "MyAttribute", function(value: string)\n    assert(typeof(value) == "string", "expected string for MyAttribute; got " .. typeof(value))\n    ...\nend)\n')),(0,a.kt)("h2",{id:"guards"},"Guards"),(0,a.kt)("p",null,"A guard is an optional predicate function that can be used to control if the observer function should be triggered for a given value. For instance, this could be used to type-check the value at runtime."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Observers.observeAttribute(\n    myInstance,\n    "MyAttribute",\n    function(value: string)\n        print("value is a string", value)\n    end,\n    function(value: unknown)\n        -- Guard function ensures the value is a string.\n        -- The observer will only trigger if this returns a truthy value.\n        return typeof(value) == "string"\n    end\n)\n')))}b.isMDXComponent=!0}}]);