"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[542],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:2},i="Observer Pattern",s={unversionedId:"observer-pattern",id:"observer-pattern",title:"Observer Pattern",description:"The observer pattern centers around observing the lifetime of a given state.",source:"@site/docs/observer-pattern.md",sourceDirName:".",slug:"/observer-pattern",permalink:"/RbxObservers/docs/observer-pattern",draft:!1,editUrl:"https://github.com/Sleitnick/RbxObservers/edit/main/docs/observer-pattern.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/RbxObservers/docs/intro"},next:{title:"Attributes",permalink:"/RbxObservers/docs/Observers/attributes"}},l={},c=[{value:"Why Lifetime is Important",id:"why-lifetime-is-important",level:2},{value:"Differences from Event-Driven Programming",id:"differences-from-event-driven-programming",level:2},{value:"Differences from Reactive (RX) Programming",id:"differences-from-reactive-rx-programming",level:2},{value:"Cleanup Idempotence",id:"cleanup-idempotence",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"observer-pattern"},"Observer Pattern"),(0,a.kt)("p",null,"The observer pattern centers around ",(0,a.kt)("em",{parentName:"p"},"observing")," the lifetime of a given state."),(0,a.kt)("p",null,'The "state" in question can be anything. It could be a color value, a position, a table, or anything else. Typically, current state can be grabbed immediately (e.g. ',(0,a.kt)("inlineCode",{parentName:"p"},"part.Color"),"), and further changes can be detected via some sort of signal (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},'part:GetPropertyChangedSignal("Color")'),")."),(0,a.kt)("p",null,"The observer pattern should provide two crucial elements:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Detect the current and all future changes to some state."),(0,a.kt)("li",{parentName:"ol"},"For a given observation, detect when that state changes to something else, thus to provide a way to clean up.")),(0,a.kt)("p",null,"The general layout of an observer should look like such:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local stopObserving = observeSomething(...params, function(state)\n    -- Do something with "state". This runs every time state changes, including the initial state.\n\n    return function()\n        -- Cleanup. Called once "state" changes to something else, or the `stopObserving` function is called.\n    end\nend)\n\n-- At anytime, the `stopObserving` function can be called to stop the above observer and clean up\n-- and currently-existing observations:\nstopObserving()\n')),(0,a.kt)("h2",{id:"why-lifetime-is-important"},"Why Lifetime is Important"),(0,a.kt)("p",null,"The lifetime of a state is defined by the time in which is begins to the time in which it ends. This is why the observer function requires developers to return a function for cleanup. By doing so, the lifetime of a given state can be captured. For game programming, this allows developers to kick off tasks for a given task, and then easily clean up those tasks once the state has changed."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'observeTag("Disco", function(part)\n    -- Start flashing the part random colors every frame:\n    local heartbeat = RunService.Heartbeat:Connect(function()\n        part.Color = Color3.new(math.random(), math.random(), math.random())\n    end)\n\n    -- Stop flashing on cleanup:\n    return function()\n        heartbeat:Disconnect()\n    end\nend)\n')),(0,a.kt)("p",null,'In the above example, the "Disco" tag is being observed. When the observer triggers the function, we enter the beginning of the lifecycle for ',(0,a.kt)("inlineCode",{parentName:"p"},"part"),", where we know that ",(0,a.kt)("inlineCode",{parentName:"p"},"part"),' has the "Disco" tag. At this point, we can hook up our disco part by flashing it different colors every frame. Then we return a cleanup function, which will be called at the end of the lifecycle (i.e. when the Disco tag is removed or the part is destroyed). This function disconnects the heartbeat connection, thus cleaning up the operation.'),(0,a.kt)("h2",{id:"differences-from-event-driven-programming"},"Differences from Event-Driven Programming"),(0,a.kt)("p",null,"Event-driven programming is quite similar, as we are able to observe changes to state. The key differences though is that event-driven programming does not necessarily encapsulate detecting the ",(0,a.kt)("em",{parentName:"p"},"lifetime")," of a given state, nor does it necessarily capture the ",(0,a.kt)("em",{parentName:"p"},"current")," state."),(0,a.kt)("p",null,"For instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'part:GetPropertyChangedSignal("Color"):Connect(function() ... end)\n')),(0,a.kt)("p",null,"The code above will fire any time the ",(0,a.kt)("inlineCode",{parentName:"p"},"Color")," property changes for ",(0,a.kt)("inlineCode",{parentName:"p"},"part"),". However, the triggered function has no understanding of when the given color changes again. Also, the given function will ",(0,a.kt)("em",{parentName:"p"},"not")," be triggered for the current state; only future changes will trigger the function."),(0,a.kt)("h2",{id:"differences-from-reactive-rx-programming"},"Differences from Reactive (RX) Programming"),(0,a.kt)("p",null,"Reactive programming cares about reacting, transforming, and consuming state. While the observer pattern is quite similar, reactive programming doesn't define the lifetime of a given state."),(0,a.kt)("h2",{id:"cleanup-idempotence"},"Cleanup Idempotence"),(0,a.kt)("p",null,"All cleanup functions should be idempotent. In other words, cleanup functions should be capable of being called many times without causing issues. For example, the top-level cleanup for an observer could be called multiple times, but should never cause a problem. This creates a safe environment for cleanup operations."))}m.isMDXComponent=!0}}]);