"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),b=a,g=u["".concat(c,".").concat(b)]||u[b]||d[b]||s;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},72345:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={},o="Tags",i={unversionedId:"Observers/tags",id:"Observers/tags",title:"Tags",description:"The CollectionService allows developers to assign arbitrary tags to any instance in a game. The observeTag observer can be used to observe instances with specific tags. This can be used to designate specific behavior to an object when it has a given tag, and to clean up the behavior once the tag is removed.",source:"@site/docs/Observers/tags.md",sourceDirName:"Observers",slug:"/Observers/tags",permalink:"/RbxObservers/docs/Observers/tags",draft:!1,editUrl:"https://github.com/Sleitnick/RbxObservers/edit/main/docs/Observers/tags.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Properties",permalink:"/RbxObservers/docs/Observers/properties"}},c={},l=[{value:"Type-Checking",id:"type-checking",level:2},{value:"Ancestry Inclusion List",id:"ancestry-inclusion-list",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tags"},"Tags"),(0,a.kt)("p",null,"The CollectionService allows developers to assign arbitrary tags to any instance in a game. The ",(0,a.kt)("inlineCode",{parentName:"p"},"observeTag")," observer can be used to observe instances with specific tags. This can be used to designate specific behavior to an object when it has a given tag, and to clean up the behavior once the tag is removed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- Observe instances with the "Disco" tag:\nObservers.observeTag("Disco", function(part: BasePart)\n    -- Spawn a thread that changes the color randomly every 0.2 seconds:\n    local discoThread = task.spawn(function()\n        while true do\n            task.wait(0.2)\n            part.Color = Color3.new(math.random(), math.random(), math.random())\n        end\n    end)\n\n    -- Close the disco thread once the tag or instance goes away:\n    return function()\n        task.cancel(discoThread)\n    end\nend)\n')),(0,a.kt)("h2",{id:"type-checking"},"Type-Checking"),(0,a.kt)("p",null,"Note that the instance class is unknown to the observer. The above example assumes it is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Part"),", but that is not guaranteed. It is best to check that the type you're expecting is correct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Observers.observeTag("Disco", function(part: BasePart)\n    assert(part:IsA("BasePart"), "expected part")\n    ...\nend)\n')),(0,a.kt)("h2",{id:"ancestry-inclusion-list"},"Ancestry Inclusion List"),(0,a.kt)("p",null,"By default, the tag observer will observe tagged instances in all ancestors within the game."),(0,a.kt)("p",null,"A common desire when observing tagged instances is to only observe instances within a specific ancestor. For instance, a developer might only want to observe instances within the workspace. This can be done by supplying a list of allowed ancestors in the ",(0,a.kt)("inlineCode",{parentName:"p"},"ancestors")," array parameter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local allowedAncestors = { workspace }\n\nObservers.observeTag(\n    "Disco",\n    function(part: BasePart)\n        ...\n    end,\n    allowedAncestors\n)\n')))}d.isMDXComponent=!0}}]);