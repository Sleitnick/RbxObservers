[{"title":"Observers","type":0,"sectionRef":"#","url":"/RbxObservers/api/Observers","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Observers","url":"/RbxObservers/api/Observers#functions","content":" "},{"title":"observeTag​","type":1,"pageTitle":"Observers","url":"/RbxObservers/api/Observers#observeTag","content":"&lt;/&gt; Observers.observeTag( tag: string, callback: (instance: T) → () → (), ancestors: {Instance }? ) → () → () Creates an observer around a CollectionService tag. The given callback will fire for each instance that has the given tag. The callback should return a function, which will be called when the given instance's tag is either destroyed, loses the given tag, or (if the ancestors table is provided) goes outside of the allowed ancestors. The function itself returns a function that can be called to stop the observer. This will also call any cleanup functions of currently-observed instances. local stopObserver = Observers.observeTag(&quot;MyTag&quot;, function(instance: Instance) print(&quot;Observing&quot;, instance) -- The &quot;cleanup&quot; function: return function() print(&quot;Stopped observing&quot;, instance) end end) -- Optionally, the `stopObserver` function can be called to completely stop the observer: task.wait(10) stopObserver() Ancestor Inclusion List By default, the observeTag function will observe a tagged instance anywhere in the Roblox game hierarchy. The ancestors table can optionally be used, which will restrict the observer to only observe tagged instances that are descendants of instances within the ancestors table. For instance, if a tagged instance should only be observed when it is in the Workspace, the Workspace can be added to the ancestors list. This might be useful if a tagged model prefab exist somewhere such as ServerStorage, but shouldn't be observed until placed into the Workspace. local allowedAncestors = { workspace } Observers.observeTag( &quot;MyTag&quot;, function(instance: Instance) ... end, allowedAncestors )  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/RbxObservers/docs/intro","content":"","keywords":""},{"title":"Wally Configuration​","type":1,"pageTitle":"Getting Started","url":"/RbxObservers/docs/intro#wally-configuration","content":"Once Wally is installed, run wally init on your project directory, and then add the various utility modules found here as dependencies. For example, the following could be a wally.toml file for a project that includes a few of these modules: [package] name = &quot;your_name/your_project&quot; version = &quot;0.1.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] Signal = &quot;sleitnick/observers@^1&quot;  To install, run wally install within your project. Wally will create a Package folder in your directory with the installed dependency. "},{"title":"Rojo Configuration​","type":1,"pageTitle":"Getting Started","url":"/RbxObservers/docs/intro#rojo-configuration","content":"The Package folder created by Wally should be synced into Roblox Studio through your Rojo configuration. For instance, a Rojo configuration might have the following entry to sync the Packages folder into ReplicatedStorage: { &quot;name&quot;: &quot;rbx-util-example&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; } } } }  "},{"title":"Usage Example​","type":1,"pageTitle":"Getting Started","url":"/RbxObservers/docs/intro#usage-example","content":"The Observers module can now be used in scripts, such as the following: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Observers = require(ReplicatedStorage.Packages.Observers) Observers.observeTag(&quot;SomeTag&quot;, function(instance: Instance) print(`Observing {instance}`) return function() print(`Stopped observing {instance}`) end end)  "}]